server {
  listen 80;
  server_name localhost; 
  keepalive_timeout 5;

  location /hellolua {
    content_by_lua_block {
        ngx.header["Content-Type"] = "text/plain";
        ngx.say("hello world");
    }
  }

  location /test1 {
    content_by_lua_block {
        ngx.say("Rerquest type: " .. ngx.req.get_method())
        if ngx.req.get_method() ~= "POST" then
            ngx.exit(ngx.HTTP_NOT_ALLOWED)
        end
 
        local cjson = require "cjson"
        ngx.req.read_body()
        local body_data = ngx.req.get_body_data()
        ngx.say("Request body: " .. body_data)
        if body_data == nil then
            ngx.exit(ngx.HTTP_NOT_ALLOWED)
        end

        local json = cjson.decode(body_data)
        for k,v in pairs(json) do
            ngx.say(type(k))
            ngx.say(type(v))
            ngx.say("Key: " .. k .. ", Value: " .. v)
        end
    }
  }

  location /test2 {
      content_by_lua_block{
          ngx.req.read_body()
          local body_data = ngx.var.request_body

          ngx.say(body_data)
          local cmd = string.format("%s '%s'", "/tmp/validate.py", body_data)
          ngx.say("Command: " .. cmd)
          local ret = os.execute(cmd)
          ngx.say(ret)
          if ret then
             ngx.say("validate success")
          else
             ngx.say("faild validate")
          end
      }
  }

  location /test3 {
      content_by_lua_block {
          ngx.say("exec put.sh")

          local ret = os.execute("/tmp/put.sh")
          ngx.say(ret)
          ngx.say(type(ret))

          if ret then
              ngx.say("command success") 
          else
              ngx.say("faild command")
          end
      }
  }

}
